import pytest
import logging
from test_assyst.utils import common
from test_assyst import constants

logger = logging.getLogger('my_logger')


def test_fetch_vulnerability_characteristic_health_data(get_vulnerability_driver_details,get_vulnerability_characteristics_details):

    get_vulnerability_driver = get_vulnerability_driver_details()
    get_vulnerability_driver_response = get_vulnerability_driver.json()
    common.check_reponse_message(get_vulnerability_driver_response,constants.get_vulnerability_driver_success_message)
    logger.info(get_vulnerability_driver_response)
    logger.info("Vulnerability driver Details Fetched Successfully")

    driver_id = get_vulnerability_driver_response ['data'][0]['vulnerabilitydriver_id']
    logger.info(driver_id)
    get_vulnerability_characteristics = get_vulnerability_characteristics_details(driver_id)
    get_vulnerability_characteristics_response = get_vulnerability_characteristics .json()
    common.check_reponse_message(get_vulnerability_characteristics_response, constants.get_vulnerability_char_success_message)
    logger.info(get_vulnerability_characteristics_response)
    logger.info("Vulnerability characteristics for Health driver Fetched Successfully")

def test_fetch_vulnerability_characteristic_Life_Events_data(get_vulnerability_driver_details,get_vulnerability_characteristics_details):

    get_vulnerability_driver = get_vulnerability_driver_details()
    get_vulnerability_driver_response = get_vulnerability_driver.json()
    common.check_reponse_message(get_vulnerability_driver_response,constants.get_vulnerability_driver_success_message)
    logger.info(get_vulnerability_driver_response)
    logger.info("Vulnerability driver Details Fetched Successfully")

    driver_id = get_vulnerability_driver_response ['data'][1]['vulnerabilitydriver_id']
    logger.info(driver_id)
    get_vulnerability_characteristics = get_vulnerability_characteristics_details(driver_id)
    get_vulnerability_characteristics_response = get_vulnerability_characteristics .json()
    common.check_reponse_message(get_vulnerability_characteristics_response, constants.get_vulnerability_char_success_message)
    logger.info(get_vulnerability_characteristics_response)
    logger.info("Vulnerability characteristics for Life Events driver Fetched Successfully")

def test_fetch_vulnerability_characteristic_Resilience_data(get_vulnerability_driver_details,get_vulnerability_characteristics_details):

    get_vulnerability_driver = get_vulnerability_driver_details()
    get_vulnerability_driver_response = get_vulnerability_driver.json()
    common.check_reponse_message(get_vulnerability_driver_response,constants.get_vulnerability_driver_success_message)
    logger.info(get_vulnerability_driver_response)
    logger.info("Vulnerability driver Details Fetched Successfully")

    driver_id = get_vulnerability_driver_response ['data'][2]['vulnerabilitydriver_id']
    logger.info(driver_id)
    get_vulnerability_characteristics = get_vulnerability_characteristics_details(driver_id)
    get_vulnerability_characteristics_response = get_vulnerability_characteristics .json()
    common.check_reponse_message(get_vulnerability_characteristics_response, constants.get_vulnerability_char_success_message)
    logger.info(get_vulnerability_characteristics_response)
    logger.info("Vulnerability characteristics for Resilience driver Fetched Successfully")

def test_fetch_vulnerability_characteristic_Capability_data(get_vulnerability_driver_details,get_vulnerability_characteristics_details):

    get_vulnerability_driver = get_vulnerability_driver_details()
    get_vulnerability_driver_response = get_vulnerability_driver.json()
    common.check_reponse_message(get_vulnerability_driver_response,constants.get_vulnerability_driver_success_message)
    logger.info(get_vulnerability_driver_response)
    logger.info("Vulnerability driver Details Fetched Successfully")

    driver_id = get_vulnerability_driver_response ['data'][3]['vulnerabilitydriver_id']
    logger.info(driver_id)
    get_vulnerability_characteristics = get_vulnerability_characteristics_details(driver_id)
    get_vulnerability_characteristics_response = get_vulnerability_characteristics .json()
    common.check_reponse_message(get_vulnerability_characteristics_response, constants.get_vulnerability_char_success_message)
    logger.info(get_vulnerability_characteristics_response)
    logger.info("Vulnerability characteristics for Resilience driver Fetched Successfully")

def test_fetch_vulnerability_characteristic_invalid_driver_id(get_vulnerability_driver_details,get_vulnerability_characteristics_details):
    get_vulnerability_characteristics = get_vulnerability_characteristics_details("ad1eef7e-bdcd-4c0c-987a-34268221ff2e")
    get_vulnerability_characteristics_response = get_vulnerability_characteristics.json()
    common.check_reponse_message(get_vulnerability_characteristics_response,constants.get_invali_vulnerability_driver_success_message)
    logger.info(get_vulnerability_characteristics_response)
    logger.info("Invalid Driver Id")

def test_fetch_vulnerability_characteristic_empty_driver_id(get_vulnerability_characteristics_empty_driver_id):
    get_vulnerability_characteristics = get_vulnerability_characteristics_empty_driver_id("")
    get_vulnerability_characteristics_response = get_vulnerability_characteristics.json()
    #common.check_reponse_message(get_vulnerability_characteristics_response, constants.get_invalid_vulnerability_driver_success_message)
    logger.info(get_vulnerability_characteristics_response)
    logger.info("Not Found")