import pytest
import logging
from test_assyst.utils import common
from test_assyst import constants

logger = logging.getLogger('my_logger')


@pytest.mark.parametrize("data", ["./jsons/create_client.json"])
def test_fetch_vulnerability_data_with_valid_customer_id(customer_id,data, create_client, post_vulnerability_data,get_vulnerability_using_customer_id):

    vulnerability_data = common.read_json("./jsons/create_new_vulnerability.json")

    # logger.info(vulnerability_data)
    client_vulnerability = post_vulnerability_data(customer_id, vulnerability_data, 'vulnerability', True)
    client_vulnerability_data = client_vulnerability.json()
    logger.info(client_vulnerability_data)
    common.check_reponse_message(client_vulnerability_data, constants.add_vulnerability_success_message)
    logger.info("Client vulnerability Added Successfully")

    get_vulnerability_customer_id = get_vulnerability_using_customer_id(customer_id)
    get_vulnerability_customer_id_response = get_vulnerability_customer_id.json()
    common.check_reponse_message(get_vulnerability_customer_id_response, constants.get_vulnerability_success_message)
    logger.info(get_vulnerability_customer_id_response)
    logger.info("Vulnerability using customer id for Health driver Details Fetched Successfully")



def test_fetch_fetch_vulnerability_data_with_invalid_customer_id(get_vulnerability_using_customer_id):
    get_client_data = get_vulnerability_using_customer_id('e34960f1-ce23-4985-a5df-d497193be3ab')
    get_client_response = get_client_data.json()
    common.check_reponse_message(get_client_response, constants.get_vulnerability_invalid_customer_id_message)
    assert get_client_response["isError"] is False
    logger.info("Fetch Customer Data With Invalid Customer ID Test Passed!")
