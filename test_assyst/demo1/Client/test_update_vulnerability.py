import pytest
import logging
from test_assyst.utils import common
from test_assyst import constants

logger = logging.getLogger('my_logger')


@pytest.mark.parametrize("data",["./jsons/create_client.json"])
@pytest.mark.parametrize("field_values", common.read_csv("./test_data_regression/Client/test_data_vulnerability.csv"))
def test_update_vulnerability_data(customer_id,get_client_data_with_customer_id,data,field_values, create_client, post_vulnerability_data,patch_vulnerability_data):

    vulnerability_data = common.read_json("./jsons/create_new_vulnerability.json")

    #logger.info(vulnerability_data)
    client_vulnerability = post_vulnerability_data(customer_id, vulnerability_data, 'vulnerability', True)
    client_vulnerability_data = client_vulnerability.json()
    logger.info(client_vulnerability_data)
    common.check_reponse_message(client_vulnerability_data, constants.add_vulnerability_success_message)
    logger.info("Client vulnerability Added Successfully")

    vulnerability_id = client_vulnerability_data['data'][0]['vulnerability_id']
    logger.info(vulnerability_id)
    data = {field: field_values.get(field) for field in field_values.keys() if
            field_values.get(field) is not None and field_values.get(field) != ''}
    expected_message = data.get(list(data)[-1])
    data.popitem()
    data.popitem()
    patch_client_data = patch_vulnerability_data(customer_id, vulnerability_id, data, 'vulnerability', False)
    patch_client_data_response = patch_client_data.json()
    logger.info(patch_client_data_response)
    common.check_reponse_message(patch_client_data_response, expected_message)
    logger.info("Client Vulnerability Updated Successfully")
    get_client_data = get_client_data_with_customer_id(customer_id)
    get_client_response = get_client_data.json()
    common.check_reponse_message(get_client_response, constants.get_client_success_message)
    logger.info("Client Details Fetched Successfully")